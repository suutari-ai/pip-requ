# -*- coding: utf-8 -*-

from __future__ import unicode_literals

import io
import os

import pytest

from prequ.configuration import (
    InvalidPrequConfiguration, NoPrequConfigurationFound)
from prequ.scripts.update import main as update_main

from .dirs import FAKE_PYPI_WHEELS_DIR
from .utils import check_successful_exit, make_cli_runner

run_check = make_cli_runner(update_main, ['-v'])

HEADER = """
# This file is autogenerated by Prequ.  To update, run:
#
#   prequ update
#
""".lstrip()


def test_default_pip_conf_read(pip_conf):
    with run_check(pip_conf) as out:
        assert 'Using indexes:\n' in out.output
        after_index_title_line = out.output.split(
            'Using indexes:\n', 1)[1].split('\n', 1)[0]
        assert after_index_title_line == 'Limiting constraints:'
        assert '--trusted-host localhost' in out.output


def test_extra_index_option(pip_conf_with_index):
    options = {
        'extra_index_urls': [
            'http://extraindex1.com',
            'http://extraindex2.com',
        ],
    }
    with run_check(pip_conf_with_index, options) as out:
        assert ('--index-url http://localhost\n'
                '--extra-index-url http://extraindex1.com\n'
                '--extra-index-url http://extraindex2.com' in out.output)


def test_wheel_dir_option(pip_conf):
    with run_check(pip_conf, options={'wheel_dir': 'foo/bar'}) as out:
        find_links_line = '--find-links foo/bar\n'.replace('/', os.path.sep)
        assert find_links_line in out.output


def test_trusted_host_option(pip_conf):
    options = {'trusted_hosts': ['example.com', 'other.example.com']}
    with run_check(pip_conf, options) as out:
        assert ('--trusted-host example.com\n'
                '--trusted-host other.example.com\n') in out.output


def test_invalid_option(pip_conf):
    options = {'invalid': 'foobar'}
    with pytest.raises(InvalidPrequConfiguration) as excinfo:
        with run_check(pip_conf, options):
            pass
        assert '{}'.format(excinfo.value) == (
            'Errors in Prequ configuration:'
            ' Unknown key name: "options.invalid"')


def test_umlaut_in_prequ_conf_file(pip_conf):
    options = {'wheel_sources': {'mämmi': 'http://localhost/mämmi'}}
    with run_check(pip_conf, options) as out:
        check_successful_exit(out)


def test_detect_annotate(pip_conf):
    txt_output = run_detection_check(
        pip_conf,
        'tiny-depender==1.0\n'
        'tiny-dependee==1.0  # via tiny-depender\n')
    assert txt_output == (
        '--trusted-host localhost\n'
        '\n'
        'tiny-dependee==1.0        # via tiny-depender\n'
        'tiny-depender==1.1\n')


WHEEL_HASHES = {
    'dependee_hash': (
        '01571cd4b1bc8c2a48cbd7a65313cde1a7a2a8b570d91986f7450dfa67bca30c'),
    'depender_hash': (
        'c0e69216348b53df1a5093c4d262f8b3f6fb9e392a71dfc5467120e1ff448a72'),
}


def test_detect_generate_hashes(pip_conf):
    txt_output = run_detection_check(
        pip_conf,
        'tiny-depender==0.1  \\\n    --hash=sha256:abc')
    assert txt_output == (
        '--trusted-host localhost\n'
        '\n'
        'tiny-dependee==1.0 \\\n'
        '    --hash=sha256:{dependee_hash}\n'
        'tiny-depender==1.1 \\\n'
        '    --hash=sha256:{depender_hash}\n').format(**WHEEL_HASHES)


@pytest.mark.parametrize('header_setting', [None, 'auto', 'yes', 'no'])
@pytest.mark.parametrize('header_present', [True, False, None])
def test_detect_header(pip_conf, header_setting, header_present):
    input_header = HEADER if header_present else ''
    output_header = (
        HEADER if (header_setting == 'yes' or
                   (header_setting != 'no' and header_present is not False))
        else '')
    input_content = (input_header + 'tiny-depender==1.0\ntiny-dependee==1.0\n'
                     if header_present is not None else None)
    options = {'header': header_setting} if header_setting else {}
    txt_output = run_detection_check(pip_conf, input_content, options)
    assert txt_output == (
        output_header +
        '--trusted-host localhost\n'
        '\n'
        'tiny-dependee==1.0\n'
        'tiny-depender==1.1\n')


def run_detection_check(pip_conf, req_txt_content, extra_options=None):
    options = {'wheel_dir': FAKE_PYPI_WHEELS_DIR}
    options.update(extra_options or {})
    conf = {
        'options': options,
        'requirements': ['tiny-depender>=1.1'],
    }
    if req_txt_content is not None:
        conf['existing_out_files'] = {'requirements.txt': req_txt_content}
    with run_check(pip_conf, **conf) as out:
        check_successful_exit(out)
        return _read_text_file('requirements.txt')


def test_conf_merging(pip_conf):
    conf = {
        'options': {'wheel_dir': FAKE_PYPI_WHEELS_DIR},
        'requirements': {
            'base': ['small-fake-a'],
            'requirements-local.in': ['small-fake-b'],
            'dev': ['tiny-depender'],  # should be overriden
            'requirements-dev.in': ['tiny-dependee'],  # overrides setup.cfg
        },
    }
    txt_prelude = HEADER + '--trusted-host localhost\n\n'
    with run_check(pip_conf, **conf) as result:
        check_successful_exit(result)
        assert 'small-fake-a' in result.output
        assert 'small-fake-b' in result.output
        assert 'tiny-depender' not in result.output
        assert _read_text_file('requirements.txt') == (
            txt_prelude + 'small-fake-a==0.2\n')
        assert _read_text_file('requirements-local.txt') == (
            txt_prelude + 'small-fake-b==0.3\n')
        assert _read_text_file('requirements-dev.txt') == (
            txt_prelude + 'tiny-dependee==1.0\n')


def test_only_in_files(pip_conf_with_wheeldir):
    conf = {
        'no_setup_cfg': True,
        'requirements': {
            'requirements.in': ['small-fake-a'],
            'requirements-test.in': ['small-fake-b'],
        },
    }
    txt_prelude = HEADER + '--trusted-host localhost\n\n'
    with run_check(pip_conf_with_wheeldir, **conf) as result:
        check_successful_exit(result)
        assert 'small-fake-a' in result.output
        assert 'small-fake-b' in result.output
        assert _read_text_file('requirements.txt') == (
            txt_prelude + 'small-fake-a==0.2\n')
        assert _read_text_file('requirements-test.txt') == (
            txt_prelude + 'small-fake-b==0.3\n')


def test_no_conf(pip_conf):
    with pytest.raises(NoPrequConfigurationFound):
        with run_check(pip_conf, no_setup_cfg=True):
            pass


def _read_text_file(filename):
    with io.open(filename, 'rt', encoding='utf-8') as fp:
        return fp.read()
